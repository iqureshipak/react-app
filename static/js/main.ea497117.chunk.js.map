{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Counter","state","value","_this","props","counter","_this2","this","classes","getBadgeClasses","react_default","a","createElement","className","formatCount","onClick","onIncrement","onDelete","id","Component","Counters","counters","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","map","c","handleDelete","counterId","filter","components_counter","key","ReactDOM","render","components_counters","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uHCmCSC,6MAnDbC,MAAQ,CACNC,MAAOC,EAAKC,MAAMC,QAAQH,+EAanB,IAAAI,EAAAC,KACHC,EAAUD,KAAKE,kBACnB,OACEC,EAAAC,EAAAC,cAAA,WAIEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWL,GAAUD,KAAKO,eAChCJ,EAAAC,EAAAC,cAAA,UAEEG,QAAS,kBAAMT,EAAKF,MAAMY,YAAYV,EAAKF,MAAMC,UACjDQ,UAAU,4BAHZ,aAOAH,EAAAC,EAAAC,cAAA,UACEG,QAAS,kBAAMT,EAAKF,MAAMa,SAASX,EAAKF,MAAMC,QAAQa,KACtDL,UAAU,6BAFZ,qDAWJ,IAAIL,EAAU,mBAGd,OAFAA,GAAwC,IAA7BD,KAAKH,MAAMC,QAAQH,MAAc,UAAY,gDAK5C,IACJA,EAAUK,KAAKH,MAAMC,QAArBH,MACR,OAAiB,IAAVA,EAAc,OAASA,SAjDZiB,aC4DPC,6MAzDbnB,MAAQ,CACNoB,SAAU,CACR,CAAEH,GAAI,EAAGhB,MAAO,GAChB,CAAEgB,GAAI,EAAGhB,MAAO,GAChB,CAAEgB,GAAI,EAAGhB,MAAO,GAChB,CAAEgB,GAAI,EAAGhB,MAAO,OAGpBoB,gBAAkB,SAAAjB,GAChB,IAAMgB,EAAQE,OAAAC,EAAA,EAAAD,CAAOpB,EAAKF,MAAMoB,UAC1BI,EAAQJ,EAASK,QAAQrB,GAC/BgB,EAASI,GAATF,OAAAI,EAAA,EAAAJ,CAAA,GAAuBlB,GACvBgB,EAASI,GAAOvB,QAChBC,EAAKyB,SAAS,CAAEP,gBAElBQ,YAAc,WACZ,IAAMR,EAAWlB,EAAKF,MAAMoB,SAASS,IAAI,SAAAC,GAEvC,OADAA,EAAE7B,MAAQ,EACH6B,IAET5B,EAAKyB,SAAS,CAAEP,gBAElBW,aAAe,SAAAC,GAEb,IAAMZ,EAAWlB,EAAKF,MAAMoB,SAASa,OAAO,SAAAH,GAAC,OAAIA,EAAEb,KAAOe,IAE1D9B,EAAKyB,SAAS,CAAEP,sFAGT,IAAAf,EAAAC,KACP,OACEG,EAAAC,EAAAC,cAAA,WAKEF,EAAAC,EAAAC,cAAA,UAAQG,QAASR,KAAKsB,YAAahB,UAAU,0BAA7C,SAGCN,KAAKN,MAAMoB,SAASS,IAAI,SAAAzB,GAAO,OAC9BK,EAAAC,EAAAC,cAACuB,EAAD,CACEC,IAAK/B,EAAQa,GACbD,SAAUX,EAAK0B,aACfhB,YAAaV,EAAKgB,gBAIlBjB,QAASA,cAhDEc,aCKvBkB,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAAcC,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCInInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ea497117.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  state = {\r\n    value: this.props.counter.value\r\n  };\r\n  // constructor() {\r\n  // super();\r\n  //this.handleIncrement = this.handleIncrement.bind(this);\r\n  //}\r\n  // handleIncrement = product => {      -- passing aurguments\r\n  //   handleIncrement = () => {\r\n  //     this.setState({ value: this.state.value + 1 });\r\n  //   };\r\n  //   doHandleIncrement = () => {     -- passing aurguments\r\n  //     this.handleIncrement({ id: 1 });\r\n  //   };\r\n  render() {\r\n    let classes = this.getBadgeClasses();\r\n    return (\r\n      <div>\r\n        {/* to show children  */}\r\n        {/* {this.props.children} */}\r\n        {/* <h4>{this.props.id}</h4> */}\r\n        <span className={classes}>{this.formatCount()}</span>\r\n        <button\r\n          //   onClick={() => this.handleIncrement({ id: 1 })}     -- passing aurguments\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    // classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 4 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 }\r\n    ]\r\n  };\r\n  handleIncrement = counter => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    counters[index].value++;\r\n    this.setState({ counters });\r\n  };\r\n  handleReset = () => {\r\n    const counters = this.state.counters.map(c => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n    this.setState({ counters });\r\n  };\r\n  handleDelete = counterId => {\r\n    //console.log(\"Delete Called\", counterId);\r\n    const counters = this.state.counters.filter(c => c.id !== counterId);\r\n    // this.setState({ counters: counters }); as name are same you can write this like below;\r\n    this.setState({ counters });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <Counter />\r\n        <Counter />\r\n        <Counter />\r\n        <Counter /> */}\r\n        <button onClick={this.handleReset} className=\"btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {this.state.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.handleDelete}\r\n            onIncrement={this.handleIncrement}\r\n            // value={counter.value}\r\n            // id={counter.id}\r\n            // selected={counter.selected}\r\n            counter={counter}\r\n          >\r\n            {/* <h4>Counter # {counter.id}</h4> */}\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}